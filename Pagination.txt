




showLimit = 10,
    showPagination = 4;

let [pagination, setPagination] = useState([]);
let [limit, setLimit] = useState(showLimit);
let [pages, setPages] = useState(Math.ceil(products.length / limit));
let [currentPage, setCurrentPage] = useState(1);


const cratePagination = () => {
    // set pagination
    let arr = new Array(Math.ceil(products.length / limit))
        .fill()
        .map((_, idx) => idx + 1);

    setPagination(arr);
    setPages(Math.ceil(products.length / limit));
};

const startIndex = currentPage * limit - limit;
const endIndex = startIndex + limit;
const getPaginatedProducts = products.slice(startIndex, endIndex);

let start = Math.floor((currentPage - 1) / showPagination) * showPagination;
let end = start + showPagination;
const getPaginationGroup = pagination.slice(start, end);

const next = () => {
    setCurrentPage((page) => page + 1);
};

const prev = () => {
    setCurrentPage((page) => page - 1);
};

const handleActive = (item) => {
    setCurrentPage(item);
};

const selectChange = (e) => {
    setLimit(Number(e.target.value));
    setCurrentPage(1);
    setPages(Math.ceil(products.length / Number(e.target.value)));
};



{
    getPaginatedProducts.map((item, i) => (
        <div
            className="col-lg-4 col-md-4 col-12 col-sm-6"
            key={i}
        >
            <SingleProduct product={item} productImages={productImages} />
        </div>
    ))
}







<div className="pagination-area mt-15 mb-sm-5 mb-lg-0">
    <nav aria-label="Page navigation example">
        <Pagination
            getPaginationGroup={
                getPaginationGroup
            }
            currentPage={currentPage}
            pages={pages}
            next={next}
            prev={prev}
            handleActive={handleActive}
        />
    </nav>
</div>














import React from "react";
// import "./styles.css";

function Pagination({
    prev,
    currentPage,
    getPaginationGroup,
    next,
    pages,
    handleActive,
}) {
    return (
        <>
            <ul className="pagination justify-content-start">
                {getPaginationGroup.length <= 0 ? null : (
                    <li onClick={prev} className="page-item">
                        {currentPage === 1 ? null : (
                            <a className="page-link">
                                <i className="fi-rs-angle-double-small-left"></i>
                            </a>
                        )}
                    </li>
                )}

                {getPaginationGroup.map((item, index) => {
                    return (
                        <li
                            onClick={() => handleActive(item)}
                            key={index}
                            className={
                                currentPage === item
                                    ? "page-item active"
                                    : "page-item"
                            }
                        >
                            <a className="page-link">{item}</a>
                        </li>
                    );
                })}

                {getPaginationGroup.length <= 0 ? null : (
                    <li onClick={next} className="page-item">
                        {currentPage >= pages ? null : (
                            <a className="page-link">
                                <i className="fi-rs-angle-double-small-right"></i>
                            </a>
                        )}
                    </li>
                )}
            </ul>

            {getPaginationGroup.length <= 0 ? null : (
                <p>
                    show {currentPage} of {pages}
                </p>
            )}
        </>
    );
}

export default Pagination;
